name: WordPress Content Update

on:
  repository_dispatch:
    types: [wordpress_content_update, wordpress_deploy]
  workflow_dispatch:
    inputs:
      post_id:
        description: 'WordPress Post ID'
        required: false
      post_slug:
        description: 'WordPress Post Slug'
        required: false

jobs:
  rebuild-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: nextjs-frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./nextjs-frontend
        run: npm ci

      - name: Generate Master Controller CSS
        working-directory: ./nextjs-frontend
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          echo "🎨 Generating build-time CSS from Master Controller settings..."

          # Generate CSS from Supabase
          npm run generate:css

          # Verify CSS was created
          if [ -f "public/static-master-controller.css" ]; then
            echo "✅ CSS generated successfully"
            ls -lh public/static-master-controller.css
          else
            echo "⚠️  CSS file not found - using default styles"
          fi

      - name: Build Static Export
        working-directory: ./nextjs-frontend
        env:
          NODE_ENV: production
          # Use static export config (file exists in Git)
          NEXT_CONFIG_FILE: next.config.static-export.ts
          # WordPress API
          WORDPRESS_API_URL: https://saabuildingblocks.com/wp-json/wp/v2
          NEXT_PUBLIC_WORDPRESS_API_URL: https://saabuildingblocks.com/wp-json/wp/v2
          # Supabase (for build-time data)
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          echo "🔨 Building static export with Next.js natural exclusion"
          echo "   Config: $NEXT_CONFIG_FILE (output: 'export')"
          echo "   Next.js will automatically skip API routes"
          echo "   SAFE: No file movement - VPS and export share same codebase"
          echo ""

          # Build with static export config (Next.js excludes API routes automatically)
          npm run build

          echo ""
          echo "📊 Build verification:"
          echo "  Files exported: $(find out -type f 2>/dev/null | wc -l)"
          echo "  Total size: $(du -sh out/ 2>/dev/null | cut -f1)"

          # Verify critical files exist
          test -d out/_next || { echo "❌ _next directory missing"; exit 1; }
          test -f out/index.html || { echo "❌ index.html missing"; exit 1; }
          test -f out/static-master-controller.css || echo "⚠️ CSS missing (non-fatal)"

          echo "✅ Static export complete - ready for deployment"

      - name: Deploy to Cloudflare Pages
        working-directory: ./nextjs-frontend
        run: |
          npx wrangler pages deploy out \
            --project-name=saa-static-export \
            --branch=main \
            --commit-dirty=true
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Trigger ISR Revalidation
        if: success()
        run: |
          # Revalidate specific paths via Next.js revalidation API
          curl -X POST https://saabuildingblocks.com/api/revalidate \
            -H "Content-Type: application/json" \
            -d '{
              "secret": "${{ secrets.REVALIDATION_SECRET }}",
              "paths": ${{ toJSON(github.event.client_payload.paths) }}
            }' || echo "Revalidation call failed (non-critical)"

      - name: Send success notification
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.resend.com
          server_port: 587
          username: resend
          password: ${{ secrets.RESEND_API_KEY }}
          subject: '✅ Site Rebuild Complete - ${{ github.event.client_payload.post_title }}'
          to: support@saabuildingblocks.com
          from: noreply@saabuildingblocks.com
          body: |
            Site rebuild completed successfully via GitHub Actions.

            Post: ${{ github.event.client_payload.post_title }}
            Post ID: ${{ github.event.client_payload.post_id }}
            Slug: ${{ github.event.client_payload.post_slug }}

            Deployment:
            - Cloudflare Pages: https://saabuildingblocks.pages.dev
            - Production: https://saabuildingblocks.com

            Paths Revalidated: ${{ join(github.event.client_payload.paths, ', ') }}

            Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Timestamp: ${{ github.event.client_payload.timestamp }}

      - name: Send failure notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.resend.com
          server_port: 587
          username: resend
          password: ${{ secrets.RESEND_API_KEY }}
          subject: '❌ Site Rebuild Failed - ${{ github.event.client_payload.post_title }}'
          to: support@saabuildingblocks.com
          from: noreply@saabuildingblocks.com
          body: |
            Site rebuild FAILED via GitHub Actions.

            Post: ${{ github.event.client_payload.post_title }}
            Post ID: ${{ github.event.client_payload.post_id }}

            Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Please check the logs for details.

      - name: Output summary
        if: always()
        run: |
          echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Post:** ${{ github.event.client_payload.post_title }}" >> $GITHUB_STEP_SUMMARY
          echo "**Post ID:** ${{ github.event.client_payload.post_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Slug:** ${{ github.event.client_payload.post_slug }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
