/**
 * INTEGRATION EXAMPLE
 *
 * This file shows how to integrate the StarBackground component
 * into your Next.js 13+ application.
 */

// =============================================================================
// OPTION 1: Add to Root Layout (Recommended)
// =============================================================================
// File: app/layout.tsx

import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import StarBackground from '@/components/StarBackground';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'My Next.js App',
  description: 'Application with animated star background',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        {/* Star background renders behind all content */}
        <StarBackground />
        {children}
      </body>
    </html>
  );
}

// =============================================================================
// OPTION 2: Add to Specific Page
// =============================================================================
// File: app/page.tsx

import StarBackground from '@/components/StarBackground';

export default function HomePage() {
  return (
    <>
      <StarBackground />
      <main className="min-h-screen p-8">
        <h1 className="text-4xl font-bold">Welcome</h1>
        <p className="mt-4 text-lg">
          This page has an animated star background.
        </p>
      </main>
    </>
  );
}

// =============================================================================
// OPTION 3: Conditional Rendering (Only on certain pages)
// =============================================================================
// File: app/layout.tsx

'use client';

import { usePathname } from 'next/navigation';
import StarBackground from '@/components/StarBackground';

export default function ConditionalStarBackground() {
  const pathname = usePathname();

  // Only show on home and about pages
  const showStars = pathname === '/' || pathname === '/about';

  return showStars ? <StarBackground /> : null;
}

// Then in your layout:
export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <ConditionalStarBackground />
        {children}
      </body>
    </html>
  );
}

// =============================================================================
// OPTION 4: With Custom Wrapper Component
// =============================================================================
// File: components/PageWithStars.tsx

import { ReactNode } from 'react';
import StarBackground from './StarBackground';

interface PageWithStarsProps {
  children: ReactNode;
  className?: string;
}

export default function PageWithStars({ children, className = '' }: PageWithStarsProps) {
  return (
    <div className={`relative min-h-screen ${className}`}>
      <StarBackground />
      <div className="relative z-10">
        {children}
      </div>
    </div>
  );
}

// Usage in a page:
import PageWithStars from '@/components/PageWithStars';

export default function MyPage() {
  return (
    <PageWithStars>
      <h1>My Content</h1>
      <p>This content appears above the stars.</p>
    </PageWithStars>
  );
}

// =============================================================================
// STYLING TIPS
// =============================================================================

/**
 * 1. Ensure content appears above stars
 *
 * The StarBackground has z-index: -10, so normal content will appear above it.
 * If you need explicit stacking:
 */
<main style={{ position: 'relative', zIndex: 1 }}>
  Your content here
</main>

/**
 * 2. Make content readable over stars
 *
 * If text is hard to read over the background, add a subtle overlay:
 */
.content-wrapper {
  background: rgba(0, 0, 0, 0.3); /* Subtle dark overlay */
  backdrop-filter: blur(2px); /* Optional blur */
  padding: 2rem;
  border-radius: 1rem;
}

/**
 * 3. Custom gradient colors
 *
 * Edit StarBackground.tsx drawStars() function:
 */
const gradient = ctx.createRadialGradient(
  canvas.width / 2,
  canvas.height,
  0,
  canvas.width / 2,
  canvas.height,
  canvas.height
);
gradient.addColorStop(0, '#1a1a2e'); // Custom color 1
gradient.addColorStop(1, '#0f0f1e'); // Custom color 2

/**
 * 4. Performance optimization for production
 *
 * Disable debug logging in production:
 */
const DEBUG_CONFIG: DebugConfig = {
  enabled: process.env.NODE_ENV === 'development',
  logLevel: 'info',
};
